<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://solaissecurity.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://solaissecurity.com/" rel="alternate" type="text/html" /><updated>2025-09-19T12:27:48+00:00</updated><id>https://solaissecurity.com/feed.xml</id><title type="html">Solais Security Solutions</title><subtitle>Providing pragmatic security solutions and guidance for start-ups and Small businesses.</subtitle><entry><title type="html">Navigating the Role of an Embedded Security Engineer - Part 1</title><link href="https://solaissecurity.com/blog/seceng-part-1" rel="alternate" type="text/html" title="Navigating the Role of an Embedded Security Engineer - Part 1" /><published>2025-08-17T00:00:00+00:00</published><updated>2025-08-17T00:00:00+00:00</updated><id>https://solaissecurity.com/blog/seceng-part-1</id><content type="html" xml:base="https://solaissecurity.com/blog/seceng-part-1"><![CDATA[<p>This is the first part in a series of posts where I plan to share my experience working in security and in particular as an embedded security engineer. With these posts I hope to document the lessons I’ve learned over the years and to provide guidance which I wish I had starting out on this journey.</p>

<h2 id="audience">Audience:</h2>

<ul>
  <li>
    <p>Engineer thinking of taking up this role</p>
  </li>
  <li>
    <p>Engineering manager hiring for a similar role</p>
  </li>
  <li>
    <p>Anyone else that is curious</p>
  </li>
</ul>

<h1 id="background">Background</h1>

<p>For the past 3 and a half years, I have worked as an embedded security engineer within the Platform tribe at Wise (formerly Transferwise), firstly as an embedded engineer with 1 or 2 teams and then working wider across the tribe as a staff engineer. During this time, I’ve witnessed significant growth within Platform, including doubling in size and the company’s transition to a public entity. Wise is a fintech focusing on international money transfers which comes with the challenges of being heavily regulated and balancing large risks with development velocity of a scaleup company.</p>

<p>Prior to Wise, my experience was in a small Security Operations team performing a mix between analyst/ IR work and security engineering. When I joined Wise, I was the first embedded security engineer they hired in Platform and I was based in the team who built and maintained our estate of kubernetes clusters.</p>

<p>The combination of it being a new role in the company and being in a team full of experienced senior engineers, it took me a long time to feel like I found my place in the role. This series of posts aims to aid engineers embarking on similar journeys but should also be useful for managers planning to hire someone into this role.</p>

<p>It’s worth noting that most of my experience has been in companies where security is a high business priority, which obviously makes some of the job easier but certainly doesn’t mean security is the only priority. Being embedded in a team where security wasn’t a priority certainly would come with a lot more challenges.</p>

<h1 id="part-1---working-with-people">Part 1 - Working with People</h1>

<p>In this article I’ll cover some of the soft skills aspects of the role and what I’ve learnt. Wise likely has quite a different culture to other companies however the points below are generally how I work anyway. Prioritising pragmatism and showing empathy for other people has gotten me a long way over the years.</p>

<h1 id="imposter-syndrome">Imposter Syndrome</h1>

<p>Being hired as a specialist outside a team’s core domain, you may feel intimidated by the depth of domain knowledge shown by your peers. It’s important to recognise that such comprehensive expertise isn’t expected of you (at least it shouldn’t be in my opinion). However, recognising this alone may not help if you aren’t aligned with your Team Lead and the other engineers on the team. Being transparent with them on how you see your role, should help to ensure you are aligned and identify any mismatched expectations. In my case the specialty is security but I feel like there would be a lot of overlap for any specialty.</p>

<p>What helped me and let me manage these feelings was realising I wasn’t hired to just be another engineer in the team and do the same work. As a specialist, you are there to bring an outside perspective and expertise. Lean in on this and identify where you can have a multiplying effect by focusing the expertise of the other engineers on the right problems.</p>

<p>Even as the “security” person in the team, you are not there to make all the security decisions, know how to secure every technology or do all the security related tasks. Your outside perspective when viewing a problem is valuable and how you can translate that to impact within the team is by driving the conversation on security and by asking the right questions to get the engineers that know the domain best to help you identify gaps. That isn’t to say you won’t do engineering work, you just need to be selective on what engineering work delivers most value - more on this later.</p>

<h1 id="communication">Communication</h1>

<p>In my experience, effective communication is essential for delivering value in this role. The team you’re a part of likely juggles conflicting priorities beyond security, and Security teams might have bigger fires outside of your immediate focus. While communication is mentioned throughout this article, here are some sample strategies I’ve found helpful.</p>

<p>This section is focused on getting feedback from fellow engineers, with other audiences you should alway consider adapting your communication methods. For example,  with senior leadership or audit functions, suggesting partially formed solutions may have negative consequences if they just accept the proposed solution.</p>

<h2 id="gathering-input">Gathering Input</h2>

<p>Something I struggled with at times, was getting ideas out of other engineers on how to solve a problem. There can be many reasons for this but I learned not to take it personally as when I’m in their shoes, someone asking for ideas on a solution can have quite a high cognitive load especially when you have other priorities.</p>

<p>To facilitate easier collaboration, a good starting point is to propose your own solution, acknowledging its potential flaws. I’ve found with engineers, if they don’t like some proposed change that will affect them, they are very quick to highlight concerns. Once you know where improvement is needed you can iterate and suggest improvements or ask specific questions on how they would improve the part they gave feedback on.</p>

<h2 id="sharing-opinions">Sharing Opinions</h2>

<p>Another area where I’ve seen people struggle is around sharing their opinion during group discussions in person or on video calls. Depending on your personality, you may struggle with sharing your opinion in these settings vs with async communication like a document. I’m not going to go into reasons for this but I will share some methods I find useful in group discussions.</p>

<h3 id="focusing-on-the-problem">Focusing on the problem:</h3>

<p>A common issue with group discussions, especially with engineers, is a tendency to focus on solutionising during discussions before there is clear alignment on the problem.</p>

<p>Group discussions are expensive and when unstructured, can be really unproductive. In my experience when there isn’t a clear solution being discussed or the conversation is going in circles, bring the focus back to the problem. When aligned on the problem, suggest taking the solutionising offline to a document or any other format.</p>

<p>This is not only more productive but also gives you an opportunity to do more research and have time to think about solutions rather than doing it on the spot.</p>

<h3 id="fear-of-being-wrong">Fear of being wrong:</h3>

<p>During group discussions the loudest voices who aren’t afraid to be wrong can dominate. This can be dangerous if decisions are based on that discussion. How I get comfortable with sharing opinions even when not confident in them, is by caveating what I say with context if it needs to be validated offline. This can make the difference between coming across arrogant vs just contributing to the discussion. There are many ways this could be phrased but ultimately you want to communicate that you are sharing the information you have that’s relevant to the discussion but if a decision is being made based on that some validation should be done offline.</p>

<h2 id="being-data-driven">Being Data Driven</h2>

<p>I’m not going to go into all the details here but a key aspect to efficiently driving conversations is the use of data. Without data discussions can go in circles theorising about how big a problem is or what impact a proposed solution might have on a problem. However, getting data to facilitate a discussion may not always be easy. Whenever available it’s worth using as having data to backup your comments makes for a much more convincing argument.</p>

<p>When presenting data it can be easy to over use it and distract from the primary topic. The process I always follow is:</p>

<p>Firstly identify what outcomes you want to achieve
Identify who your audience is and what conversations you need to drive to achieve those outcomes
Plan reporting around those conversations and audience
If any data or chart is distracting from the primary conversation, move it to a different view</p>

<p>Key consideration with using data is to not try to build the same view for all audiences.</p>

<p>For some topics like configuration issues and vulnerability management, data is much easier to collect while for others like network traffic metadata, public historical breach patterns, risk likelihood and impact it might not be worth the time investment during the planning phase of a project to collect it. For these harder data sources, prioritising based on theory may be more effective but consider investing in reporting to track progress over the longer term.</p>

<p>Related to data, a common question I get asked is about trying to put monetary loss value to a risk. With security risk, there are usually so many variants of how the risk could materialise that any value is a wild guess. For example, the same risk might materialise weekly with insignificant impact and once every 5 years with catastrophic impact. How you deal with this depends on your company’s risk process but I wanted to point it out as a common challenge.</p>

<h1 id="working-with-security-conscious-engineers">Working with Security Conscious Engineers</h1>

<p>Based on stereotypes and past experience working in more siloed Security teams, it was somewhat surprising at the start to find engineers pointing out and fixing security issues without anyone else telling them. Obviously this is how it should be, as security is everyone’s responsibility, but as you’ll find out being embedded within an Engineering team, it’s not always that simple.</p>

<p>I got lucky, in that some of the senior engineers I worked with were at times, more security conscious than I was. This is a great learning opportunity and can make your life easier but certainly doesn’t come without its own set of challenges.</p>

<p>Working with these engineers over time, I realised that for these engineers where I can bring most value is by helping them rationalise the risk and how to prioritise the issues. For the engineers, as they know the systems so well it can be easy to go down a rabbit hole and identify really niche hard to exploit weaknesses. Security isn’t binary where it is either secure or not. If you want to deliver business value outside fixing issues, you need to have a risk appetite and balance that with the need to invest in non-security projects.</p>

<p>If you’ve never had to help teams balance security with everything else they are responsible for, this could be a challenge for you and take some time to understand how the business prioritisation works. Security is just one prioritisation factor that a team needs to consider. You will also need to take into account service availability, cost, growth opportunities, etc..</p>

<p>This also works in reverse though. When you are suggesting a security improvement, whether it be a process or configuration change, generally all engineers will really question the value of the change in the context of the team’s priorities. The upside is, if you can convince them, they can be incredibly committed and supportive to solving that problem.</p>

<p>When working in standalone Security teams, it’s easier to follow best practice and not really question what is behind that guidance. Having to debate with engineers on the true value of a change will really test your knowledge and you have to be willing to admit some best practice/idea you believed in might not add much value. Wise has a core value of “customer &gt; team &gt; ego” and it’s in these situations where you really need to put ego aside.</p>

<h1 id="building-bridges">Building Bridges</h1>

<p>An important part of being an embedded security engineer is building relationships/ bridges between the Security teams and your team. This is valuable so that you and the teams you work with build up context on other parts of the business. Context is key to facilitating effective cross team collaboration as it allows you to view a problem from someone else’s perspective.</p>

<p>NB: When working across multiple teams, it’s critical to avoid becoming the messenger between those teams. You need to try to improve collaboration without them becoming dependent on you.</p>

<h2 id="building-context-and-trust">Building Context and Trust</h2>

<p>Embedded roles may lack the support network of peers with similar priorities and backgrounds. Therefore, maintaining close ties with the relevant Security teams is crucial. Depending on the project, this could involve collaborating with Security Operations, Application Security, Governance, or Compliance teams. If your background aligns with one of these domains, reaching out may feel less daunting vs being in these teams and having to reach out to unfamiliar business functions. The benefit of being embedded, especially if you’re not the most outgoing person, is that building those relationships with the teams/engineers outside your normal area of expertise comes naturally as you are part of their team. As you spend time with these team’s, you’ll build up knowledge on their priorities and challenges. This contextual knowledge is key to driving better collaboration.</p>

<p>Building context on a team can be done relatively quickly, trust on the other hand takes time. On building trust and improving collaboration I’d recommend the book “The Software Engineer’s Guidebook” by Gergely Orosz. It has a section on collaboration for Staff+ engineers which I found strongly overlaps with the skill required as embedded security engineer and would be a great resource for anyone in that role.</p>

<h2 id="facilitating-collaboration">Facilitating Collaboration</h2>

<p>When you have a good understanding of multiple teams and have built trust with their engineers, you are in the best position to bring those teams closer. This will happen most naturally when one side needs something from the other.</p>

<p>Use these opportunities to allow the teams to collaborate, rather than throwing requirements over the wall hoping they get done. At times, you can feel like a translator but it’s worth it in the short term to improve collaboration. As you’ll have context on both teams, you can help by identifying any miscommunications or conflicting priorities. Helping the team past these should allow the teams to build trust and respect for each other’s challenges so that in future your “translation” isn’t required.</p>

<p>An example of this which I’ve seen is when a Security team will make a request for a solution without much context on the current engineering challenges/priorities. The engineering team doesn’t have context on why the request is important and think the suggested solution doesn’t make sense technically for their system.</p>

<p>This can result in the Engineering teams disengaging, saying the Security team doesn’t know what they are talking about and Security teams saying the engineering teams don’t care about security.</p>

<p>As the person with context on both sides, you will need to help both sides step back from the solution, understand the problem and then collaborate on a solution.</p>

<p>This breakdown in collaboration isn’t specific to security but can happen with a request from any team to another team where the request isn’t communicated with empathy for the other team.</p>

<h1 id="closing-comment">Closing Comment</h1>

<p>This post is based on my experience across my career so far, however it should be applicable regardless if you’re an embedded security engineer or a security engineer at all. Building strong cross team collaboration skills is key to delivering value outside your team scope and delivering projects that have cross team dependencies. Also as a security engineer in a Security team everything above should be applicable in reverse where you have to build relationships with the other Engineering teams, doing this is how I delivered the most value in my previous company and what helped get my current role.</p>

<p>The next post will focus on lessons I learned or wish I learned getting stuck into the technical work when I started out as an embedded security engineer.</p>]]></content><author><name></name></author><category term="post" /><category term="security-engineering" /><category term="ways-of-working" /><summary type="html"><![CDATA[A deep dive into the role of an embedded security engineer, sharing lessons learned, practical advice, and strategies for effective collaboration and impact.]]></summary></entry><entry><title type="html">Navigating the Role of an Embedded Security Engineer - Part 2 - Getting Started</title><link href="https://solaissecurity.com/blog/seceng-part-2" rel="alternate" type="text/html" title="Navigating the Role of an Embedded Security Engineer - Part 2 - Getting Started" /><published>2025-08-17T00:00:00+00:00</published><updated>2025-08-17T00:00:00+00:00</updated><id>https://solaissecurity.com/blog/seceng-part-2</id><content type="html" xml:base="https://solaissecurity.com/blog/seceng-part-2"><![CDATA[<p>In the first blog post of this series, I outlined some of my thoughts on collaboration and working with people. I chose that topic first as I believe it is one of the most fundamental skills to succeed in any role but especially as an Embedded Security Engineer. This blog post is going to focus on getting started with delivering work for your team and how to deal with pressures of a new role.</p>

<p>It is easy to get overwhelmed in security and feel like everything is a priority. This can lead to great engineers not delivering on their potential and getting lost juggling too many parallel streams of work. In this post I’m going to share some of my learnings on dealing with this, which I’m hoping can help someone make a start in an embedded role without becoming overwhelmed. I chose this topic second as getting a good start to a new role sets up the foundations which your future impact is built off.</p>

<h1 id="part-2---getting-started">Part 2 - Getting Started</h1>
<hr />
<h1 id="1-onboarding">1. Onboarding</h1>

<p>As mentioned in the first blog post, gaining a deeper understanding of your team and their systems is a key benefit of this role. The best way to achieve this is by getting hands-on experience with their systems. While this approach may not be feasible for everyone or in every situation, in my opinion, it’s the most effective way to build the foundational technical knowledge necessary for future work.</p>

<p>Assuming you won’t be as experienced with the team’s primary technologies as the other engineers, a good starting point is to follow any onboarding exercises designed for more junior engineers. During this process, take notes on potential security improvements or gaps, but avoid making immediate fixes unless they are minor. I would recommend that you focus first on building your knowledge and observing how the systems function.</p>

<p>Personally I would prefer getting hands on, but if this isn’t an option, consider alternatives like training, shadowing an engineer, e.g. while they perform common tasks, or simply asking them to explain how they work day to day and how the team’s systems work. Early in my time in this role, I prioritised getting hands on (plus a mix of the other learning methods) but later I had to find a balance between delivering on security objectives and getting enough context through general engineering work.</p>

<h1 id="2-focusing-on-your-speciality">2. Focusing on your Speciality</h1>

<p>After some onboarding time, you will need to start focusing on delivering improvements in security. When it comes to knowing what to work on you generally have two options, take the initiative to proactively identify projects or wait for the direction to be outlined by your lead. When it comes to how I plan my work, I have a strong preference towards being proactive, however that doesn’t mean I work on whatever I want. When taking the initiative you need to know how to both communicate with your lead and team. The final piece of that puzzle is knowing how to effectively prioritise. Within the field of Security, I believe this is a common struggle for people as we are often choosing between equally important risks. Below I’ll share some guidance on prioritisation based on my experiences.</p>

<h2 id="21-prioritisation">2.1 Prioritisation</h2>

<p>There are generally two ways I view priorities. Firstly, you and your team’s initiatives relative to each other, secondly, those initiatives prioritised within the wider business context. The second point on the business context is more important as delivering business value is ultimately the goal but I mentioned it second as it takes time to build up the knowledge &amp; support structure to do this. Assuming you have a list of initiatives to work on, the process of prioritising them against each other generally follows standard patterns in security and risk management, e.g. comparing likelihood and impact. As I mentioned in my first blog post, quantifying this can be extremely challenging but don’t be afraid to just go with your gut instinct. Not making a decision and trying to do both will likely do more harm than choosing the wrong priority. When following my instincts, at a minimum I try to describe my internal rationale for why I’m leaning one way or another. Even if this is vague it’s better than nothing, as you can challenge and iterate on it. When following instincts, you also need to be willing to admit when you are wrong and adapt.</p>

<p>Building up enough business context to know where your work fits in the wider business priorities takes time and isn’t always possible to do on your own. This is especially true when you are new in the role. Prioritising within the wider business context is where you should lean on your lead, team and product managers for input. They might know of some business context which will change up your priority order. Examples could be, cost saving directives, regulatory pressure, strategic initiatives which need support.</p>

<p>Even if your priorities are out of your hands, having an internal prioritisation model will help you understand the business context and refine your skills. Comparing your internal prioritisation vs final prioritisation will give you a feedback loop on your model and allow you to iteratively improve. Improving this over time will help you build trust and eventually gain more independence and provide value to your team’s planning.</p>

<p>Something not covered here is balancing long term strategic initiatives vs short term fixes which I’ll cover in a later post when talking about one-way door decisions. Tackling these strategic initiatives should be avoided when getting started which is why I’ve left it out.</p>

<h2 id="22-fire-fighting">2.2 Fire Fighting</h2>

<p>I mentioned earlier how in security it can be easy to get overwhelmed by all the issues that need to be fixed. We are trained to see a threat in every misconfiguration and vulnerability but not all vulnerabilities are equal and not every threat can be fully mitigated. The following statement is important to remember when trying to prioritise what to fix:</p>

<p>You can’t solve every problem at once, and trying to do so will result in nothing getting fixed.</p>

<p>Just to be clear, if you find some obvious fires burning that will have a material impact on the company in the short term, you need to prioritise and escalate them. However, it’s important to remember you aren’t alone. There was a security team there before you (hopefully) and the company needs to deal with incidents when you are unavailable. Becoming a one-stop shop for all things security creates a single point of failure, which is in the business’s best interest to avoid.</p>

<p>As mentioned above, findings like an existing breach, publicly exposed data sets, exploitable public vulnerabilities, etc., are impossible to ignore and difficult to prioritise one vs the other. However, more systemic issues which can’t be directly exploited may need more pragmatic handling. Something I’ve always struggled to rationalise, is the tendency to treat a security issue as the highest priority when found even though it has been there for months or years. Sometimes a high priority is completely justified but other times creating a new high priority can distract from delivering existing impactful improvements. In this situation, there can be a fine balance between being pragmatic vs becoming jaded and not showing the appropriate level of urgency. When you are new to a company you are more likely to place excessive urgency on an issue, however this new urgency can be valuable. Bringing urgency to an existing issue adds a fresh perspective to people who may have been dealing with the same issue for too long. It’s important, though, when driving the level of urgency, to be open to hearing reasons why an issue can’t be fixed or why it’s a lower priority than you might think.</p>

<p>Every situation is different and needs to be evaluated on its own. However, when trying to figure out the urgency of some remediation action, try to think about the impact of a delay to the business:</p>

<p>What is the threat and worst case impact?
What is the probability?</p>

<p>A common question you might get asked when dealing with urgent incidents is, can the fix wait until tomorrow or after the weekend? Being asked this question doesn’t mean you have to make the final call as you might not be comfortable/authorised to make it. What you can do is provide information and your perspective so that, if there are more senior people available, they can make an informed decision. When doing this, outline the facts that you know, what unknowns there are and what your informed choice would be, with a caveat of what risks that includes. This allows you to contribute and ensure an informed decision is made even if you don’t make it.</p>

<h2 id="23-using-past-experience">2.3 Using Past Experience</h2>

<p>Unless this is your first role, everyone has worked in other companies and seen how problems can be solved in different ways. When you join a new company it’s easy just to compare your new and old company to see what gaps there are. However, the approach you take to using/sharing this information and experience is important to building trust. In my experience, someone saying we did it this way in my previous company may come off as someone who isn’t adaptable or didn’t fully understand the reasons behind choices. Every company has a different journey, working culture, risk appetite and depending on current business context varying priorities. It’s important to understand why historical decisions were made before challenging them.</p>

<p>Focus on the problems at hand and why they need to be solved in the context of your current company. When it comes to outlining potential solutions, this is where your experience becomes valuable. Based on the solutions you have seen elsewhere you can propose potential solutions. With these solutions, highlight any challenges you faced/observed with that choice that may not be obvious unless you’ve experience implementing it. The key point here is what you saw elsewhere should always only be a potential solution rather than the right solution by default.</p>

<h1 id="3-starting-small">3 Starting Small</h1>

<p>Assuming there are no fires burning when you join, starting small is key to long-term success in this role. I mentioned in my first blog post the concept of building trust capital. To do this, you need to deliver impact and finish projects. In my experience, some of the most important and impactful work for improving a business’s security requires cultural or cross team process/technology changes. However, these large scale changes can take years to deliver and are the types of changes which require leveraging trust and goodwill which you need to build up.</p>

<p>Starting with small scoped changes will allow you to not only build trust but also get more of an understanding on how teams work and how to approach driving changes in the team and wider. After reflecting on my experience, below is some general advice which should help regardless of the starter projects you choose: (This advice is specific to when starting out in the role)</p>

<p>Ensure they can be delivered anywhere between a few weeks to max. 1 quarter. 
When just starting and if possible, avoid projects which need extensive cross-team collaboration. This can help you to deliver early on in your journey before you have extensive connections and business knowledge. 
Avoid sharing high level principles like “least privilege” as remediation advice. Any competent engineer could google security best practice and find general principles. To deliver value as an SME, you need to translate those principles to actionable insights specific to the system you are working with. 
To counterbalance the previous point on being too vague, try to avoid being overly prescriptive on the solution. Some solutions are obvious and don’t need to be over thought, e.g if it’s just changing a best practice setting in an existing system. However, when a problem could be solved in multiple ways, focus on making the problem well understood. 
Before you try to teach other engineers to do something on their own, e.g. system hardening, do it yourself first to experience any pain/ challenges they may face. This will allow you to mentor your peers more effectively as you can have empathy and they know you have shared experience of their challenges.</p>

<p>A final point on this topic is to focus on your team’s most critical system and work down the list. At some point either when you get to non-critical systems where the return on your time investment is diminishing or when you feel you’ve built up enough trust capital to take on bigger problems, you should start looking into any longer term strategic changes you could make.</p>

<p>Given this blog is specific to an Embedded Security Engineer, I want to give a few more specific suggestions of where to start. These suggestions are based on my experience embedded with Platform teams so treat them as a source of inspiration:</p>

<p>Review system configuration/hardening
Perform access reviews and secret handling practices
Improving existing security tooling/processes</p>

<p>The following three subsections are only relevant if you want more specific insights on my suggestions for these project topics, otherwise you can skip them.</p>

<h2 id="31-configuration-reviews">3.1 Configuration Reviews</h2>

<p>Whatever technology the team maintains, there will likely be some best practice guidance on how to harden it. This can be done through tooling, following an available guide or where there is nothing available by applying your experience and general best practice to the system.</p>

<p>Configuration reviews/system hardening is a good starting point as an embedded engineer as it has a finite scope and should be something you can either lead or contribute to remediation. This builds off what I mentioned in the onboarding section about being hands on but delivers even more value for your time investment as you are delivering improvements to security which is what you are there for.</p>

<p>For the scope of hardening work to be small, your team would need to primarily own the system you want to review. Doing any work on a system owned by multiple teams will increase the delivery time massively. I’m not going to go into detail on this but simply put, more people, especially cross-team, means more admin work and more people to convince before a change is allowed.</p>

<p>Something to remember with following standards or best practice guides: If you are asking other people to follow your recommendation, it will build much more trust if you understand the intent behind a requirement vs just using “the standard says” as the motivation for your request. This takes more time but it also means when you come across a system which doesn’t have a guide you’ll know what to look out for.</p>

<h2 id="32-access-reviews">3.2 Access Reviews</h2>

<p>A lot of the same advice for scope of configuration reviews would be applicable when performing access reviews, but remember to keep this somewhat simple and just try to reduce risk without trying to revolutionise the tooling or ways of working. The goal when starting out is to build experience while delivering impact.</p>

<p>When embedded or working with Platform/Infrastructure teams, the blast radius and impact from insider threats is massively increased. Therefore, for these teams with privileged access to critical systems, quick wins can be found by:</p>

<p>Reducing permissions that aren’t used.
Reducing the attack surface, e.g., removing people with privileged access that don’t need it.
Adding preventative/monitoring controls on the worst-case abuses of that privileged access.</p>

<p>Something that is easy to overlook when trying to reduce the risk from privileged access is the secrets management for the system you are reviewing. There is no value in reducing access to a system via one authentication path if the same engineers who lost some access can use break-glass methods or privileged service accounts to authenticate to the system with the same or more privileges as before.</p>

<p>The topic of privileged access management could be a whole blog post on its own but below are a few pointers to help when working on this:</p>

<p>You have to balance engineer productivity with security - unproductive engineers impose a high cost to the business too. 
Making your team’s day to day harder without their buy-in will make you lose trust and the goodwill capital you’ve built up.
Before removing permissions, work with the team on what tooling/automation is needed to allow them to still do their job efficiently. 
If you don’t think about usability and productivity, engineers will find another way to do their job and bypass your controls (shadow IT).</p>

<h2 id="33-improving-tooling--processes">3.3 Improving Tooling &amp; Processes</h2>

<p>Any Engineering team is likely to have existing security related processes and there will also likely be tools/processes owned by the Security team which they have to follow. This makes improving internal team tooling and processes a great starting project. The objective here is not to introduce something new but to identify frustrations with an existing tool/process and iterate on it to make them more effective and less toilsome.</p>

<p>Some more specific improvement examples:</p>

<p>Improving reporting
Identifying unnecessary steps in a process and removing them.
Building guardrails into CI/CD pipelines.</p>

<p>With processes managed by other teams, this is also a great opportunity to start building up your network and, in my experience, if you can make a team’s life easier by improving something that is outside their control it will build a lot of trust.</p>

<p>A common example of this is vulnerability management (tooling and processes). As you are embedded you should be able to view and experience the tooling from the perspective of the engineers vs just from the Security team. Using this and your security knowledge can allow you to suggest/make improvements to the process which would drive better engagement and enable teams to do the right thing vs frustrating them.</p>

<h1 id="4-definition-of-done---lessons-learned">4 Definition of Done - Lessons Learned</h1>

<p>In an embedded role, part of the difference from my perspective was the emphasis on delivering value for the team vs just delivering recommendations. The two aren’t mutually exclusive for example, delivering a threat model which shows where the system can be improved delivers value if the team on its own doesn’t have the time or expertise to deliver it. However, adding even more value would be delivering the threat model and then contributing on some of the remediation work.</p>

<p>When setting out on a project, two lessons I learnt is to one, be explicit in defining the scope and what done looks like, and two, define how you will measure the difference the project has made. That measurement doesn’t have to be a fancy dashboard that is populated automatically. It can be really basic like a manual measurement, for example a count of the number of people with admin rights. These two steps are critical to know when you have done enough in one specific project which allows you to move on without keeping too many parallel projects in progress.</p>

<p>With experience I learnt that there is another step after delivering remediation work to mitigate an issue. That step is being able to have confidence that your remediation work is still effective in 6 months, a year and that the same issue hasn’t popped up somewhere else in the company’s infrastructure. If you can deliver this on top of remediation work you will maximise your impact. Having reporting or another process to show the issue hasn’t come back adds value in a few ways:</p>

<p>Allows you to focus on new issues without having to fix the same issues twice or constantly check if what you did is still working. 
Allows you to demonstrate if audited that a control is in place and working. 
Allows you to quickly detect if a mitigation is reverted.</p>

<p>While this last step is important and should be the long term objective with any critical controls, it shouldn’t stop you from just delivering the remediation work. If you only have resources to deliver the remediation but nothing more, it’s still reducing the risk to the business.</p>

<h1 id="5-conclusion">5 Conclusion</h1>

<p>This blog post is a reflection of my experience starting out in this role and in other roles. The most important points to remember are don’t try to fix everything at once, start small and focus on measurable impact and don’t jump into trying to change architecture or culture straight away, even if you know this is needed eventually.</p>

<p>My next blog post will be from a slightly different perspective and focus on looking at when you should consider hiring embedded engineers and what to consider when doing that.</p>]]></content><author><name></name></author><category term="post" /><category term="security-engineering" /><category term="ways-of-working" /><summary type="html"><![CDATA[This post explores strategies for Embedded Security Engineers to effectively onboard, prioritize tasks, and deliver impactful results while navigating the challenges of a new role. Learn how to start small, build trust, and balance immediate fixes with long-term improvements.]]></summary></entry></feed>